#!/usr/bin/env node

// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: oasgraph
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

import * as express from 'express'
import * as graphqlHTTP from 'express-graphql'
import { createGraphQlSchema } from 'oasgraph'
import * as path from 'path'
import * as request from 'request'
import * as fs from 'fs'
import { printSchema } from 'graphql'

const app = express()

const outputFileName = 'schema.graphql'

if (process.argv.length <= 2) {
  const usage = 'oasgraph <OAS JSON file path or remote url> [port number|--save]'
  console.log('Usage: ' + usage)
  process.exit(-1)
}

let filePath = process.argv[2]

// default values if only the url or local file is specified
let portNumber : number | string = 3001
let saveSchema = false

for (var i=3; i<=process.argv.length-1; i++) {
   if (isNaN(Number(process.argv[i])) && process.argv[i] === '--save') {
     saveSchema = true
   } else {
     // it is safe now if user intentionally provides more arguments
     portNumber = isNaN(Number(process.argv[i])) ? portNumber : process.argv[i]
   } 
}

// check if the file exists 
if (fs.existsSync(path.resolve(filePath))) {
  let oas = require(path.resolve(filePath))
  startGraphQLServer(oas, portNumber)
    
} else { // falls back to a remote location
  if (filePath.match(/^https?/g)) {
    getRemoteFileSpec(filePath).then(remoteContent=> {
    startGraphQLServer(remoteContent, portNumber)
  })
  } else {
    console.log(`OASGraph reading local file error. file ${filePath} does not exist.`)
    } 
}

/**
 * reads a remote file content using http protocol
 * @param {string} url specifies a valid URL path including the port number
 */
function getRemoteFileSpec (uri) {
  return new Promise((resolve, reject) => {
    request({
      uri,
      json: true
    }, (err, res, body) => {
      if (err) {
        reject(err)
      } else if (res.statusCode !== 200) {
        reject(new Error(`Error: ${JSON.stringify(body)}`))
      } else {
        resolve(body)
      }
    })
  })
}

/**
 * generates a GraphQL schema and starts the GraphQL server on the specified port 
 * @param {Object} oas the OAS specification file
 * @param {number} thePort the port number to listen on on this server
 */
function startGraphQLServer(oas, thePort) {
  // Create GraphQL interface
  createGraphQlSchema(oas) 
     .then(({schema, report}) => {
      console.log(JSON.stringify(report, null, 2))

      // save local file if required 
      if (saveSchema) {
        writeSchema(schema);
      } else {
        // mounting graphql endpoint using the middleware express-graphql
        app.use('/graphql', graphqlHTTP({
          schema: schema,
          graphiql: true
        }))

        // initiating the server on the port specified by user or the default one
        app.listen(thePort, () => {
          console.log(`GraphQL accessible at: http://localhost:${thePort}/graphql`)
        })
      }
    })
    .catch(err => {
       console.log('OASGraph creation event error: ', err.message)
     })
}

/**
 * saves a grahpQL schema generated by OASGraph to a file
 * @param {createGraphQlSchema} schema 
 */
function writeSchema(schema){
  fs.writeFile(outputFileName, printSchema(schema), (err) => {
    if (err) throw err
    console.log(`OASGraph successfully saved your schema at ${outputFileName}`)
  })
}
